{"name":"Jquery.extend","tagline":"扩展了一些jquery方法","body":"# jquery.extend 对jquery扩展了几个方法。\r\n\r\n###编译文档\r\n1.克隆项目: （需要git）\r\n```html\r\ngit clone https://github.com/kyo4311/jquery.extend.git\r\n```\r\n2.安装包：转到项目目录 (需要node) https://nodejs.org/\r\n```html\r\nnpm install\r\n```\r\n3.编译文档：转到项目目录 运行grunt命令 http://gruntjs.com/\r\n```html\r\ngurnt\r\n```\r\n如果只想用这些方法，那么只要下载js,然后看demo使用即可，当然看文档可能会更方便一些。\r\n\r\n### $.addCss()\r\n向页面添加css样式或css地址。\r\n```js\r\n$.addCss('body{font-size:16px;}');\r\n$.addCss('http://static.abc.com/css.css');\r\n```\r\n\r\n\r\n### $().datalazy () Object\r\nhtml懒加载\r\n```html\r\n<div class=\"box\">\r\n    <textarea>\r\n        <div class=\"box2\">\r\n            <img src=\"http://pic.nipic.com/2008-07-15/2008715145556818_2.jpg\" width=\"100%\" />\r\n        </div>\r\n    </textarea>\r\n</div>\r\n```\r\n\r\n```js\r\n$('.box').datalazy();\r\n```\r\n\r\n\r\n\r\n### $.functionDo ( fn  arr  context ) 不一定\r\n如果fn是一个函数，则返回函数执行后的值，否则直接返回fn\r\n```js\r\n//例一：是函数就执行\r\nvar funA = function(){\r\n    console.log('第一个例子：是函数就执行');\r\n};\r\n$.functionDo(funA);\r\n\r\n//例二：函数需要传参\r\nvar funB = function(a, b){\r\n    console.log('第二个例子传入参值为:', a, b);\r\n    return a * b;\r\n};\r\nvar funBOut = $.functionDo(funB, [8, 8]);\r\nconsole.log('执行后是有返回值的:', funBOut);\r\n\r\n//例三：改变函数体里面的this\r\nvar funC = function(a, b){\r\n    console.log('第三个例子:', a, b, this);\r\n};\r\n\r\n$.functionDo(funC, [10, 10], {name: 'hello'});\r\n\r\n//例四：传入其他值返回原值\r\nvar funD = 123;\r\nvar funDOutPub = $.functionDo(funD);\r\nconsole.log(funDOutPub);\r\n```\r\n### $.functionCall ( fn  callback  context ) Undefined\r\n把fn执行的值，返回到callback的参数里面。\r\n```js\r\n//例一，值是方法返回的\r\n var a = function(x, y, z) {\r\n     return x + y + z;\r\n };\r\n var aa = $.functionDo(a, [1, 2, 3]);\r\n $.functionCall(aa, function(res){\r\n     console.log('例一，值是方法返回的', res);\r\n });\r\n \r\n \r\n //例二，值是原始值\r\n var b = 123;\r\n var bb = $.functionDo(b);\r\n $.functionCall(bb, function(res){\r\n     console.log('例二，值是原始值', res);\r\n });\r\n \r\n //例三，值是延时对象\r\n var c = function(name) {\r\n     var dtd = $.Deferred(); //延时对象\r\n     setTimeout(function(){\r\n         dtd.resolve({name: name, age : 18}); // 改变Deferred对象的执行状态\r\n     }, 1000)     \r\n     return dtd.promise();\r\n };\r\n var cc = $.functionDo(c, ['xidada']);\r\n $.functionCall(cc, function(res){\r\n     console.log('例三，值是延时对象', res);\r\n });\r\n \r\n //例四, 改变callback是里面的this\r\n $.functionCall(aa, function(res){\r\n     console.log('例四，改变this', res, this);\r\n }, {name : 'xidada'});\r\n```\r\n\r\n\r\n\r\n### $().module ( options  [type] ) Object\r\n生成一个模块.\r\n```js\r\n//定义一个模块方法\r\nvar f = $('#scroll').module({\r\n    data : { text : 'hehe'},\r\n    template : function (){\r\n        return '<%= text %>';\r\n    },\r\n    css : function () {\r\n        return '#scroll{color:#fff;}';\r\n    },\r\n    event : function(){\r\n         //需要执行的事件\r\n    }\r\n}, 'scroll');\r\n\r\n//执行f这个方法的操作\r\nf();\r\n\r\n//定义一个延时加载的模块\r\nvar g = $('#lazyLoad').module({\r\n    data : {text : 'hehe'},\r\n    template : function (){\r\n        return '<%= text %>';\r\n    },\r\n    css : function () {\r\n        return '#lazyLoad{color:#fff;}';\r\n    },\r\n    event : function(){\r\n        //需要执行的事件\r\n    }\r\n    }, 3000);\r\ng();\r\n```\r\n\r\n### $().On ( event  [selector]  [data]  handler(eventObject)  [lazytime] ) => jQuery\r\njquery on事件的改造，增加lazytime，在一定时间内只执行一次，需要引入underscore.js\r\n```js\r\n//3秒内，最多点击一次\r\n$('body').On('click', 'div', function(){\r\n    alert(1);\r\n}, 3000);\r\n\r\n//滚动的时候，200毫秒执行一次\r\n$(window).On('scroll', function(){\r\n    //do something\r\n}, 200);\r\n\r\n//传入data\r\nfunction myHandler( event ) {\r\n    alert( event.data.foo );\r\n}\r\n$('p').On('click', {foo : 'bar'}, myHandler, 1000);\r\n```\r\n### $.getRegExp ( key ) RegExp\r\n取常用正则表达式\r\n```js\r\nvar z1 = $.getRegExp('email'); //tel | phone | qq | email | url | idcard\r\nconsole.log(z1);\r\n```\r\n\r\n### $.isRegExp ( value ) Boolean\r\n判断是否为正则表达式\r\n```js\r\nvar a1 = '1';\r\nvar b1 = $.isRegExp(a1);\r\nconsole.log(b1);\r\n```\r\n\r\n### $.testRegExp ( value  string )\r\n测试字符串是否能通过正则表达式\r\n```js\r\n//如果正则\r\nvar out1 = $.testRegExp(/[0-9]/, '091123');\r\nconsole.log(out1);\r\nvar out2 = $.testRegExp(/[0-9]/, 'abc');\r\nconsole.log(out2);\r\n\r\n\r\n//如果key\r\nvar out3 = $.testRegExp('email', '1@163.com');\r\nconsole.log(out3);\r\nvar out4 = $.testRegExp('email', '111#qq.com');\r\nconsole.log(out4);\r\n\r\n\r\n//如果其他值\r\nvar out5 = $.testRegExp('', '1@163.com');\r\nconsole.log(out5);\r\n```\r\n\r\n### $.template ( template  data ) String\r\n模板+数据生成字符串\r\n\r\n```js\r\nvar tpl = '<li>姓名：<%= name%></li>';\r\nvar str1 = $.template(tpl, {name : 'kyo'});\r\nconsole.log(str1);\r\n\r\n\r\nvar data2 = [{\r\n    name : 'kyo'\r\n},{\r\n    name : 'iori'\r\n}];\r\nvar str2 = $.template(tpl, data2);\r\nconsole.log(str2);\r\n```\r\n\r\n### 杂项\r\n1. 希望得到大家的支持，给个star吧\r\n2. QQ: 9169775 大家可以一起交流\r\n3. QQ群：8685914 \r\n\r\n\r\n\r\n\r\n\r\n","google":"UA-63363632-1","note":"Don't delete this file! It's used internally to help with page regeneration."}